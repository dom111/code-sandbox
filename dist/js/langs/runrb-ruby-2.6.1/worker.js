(()=>{var o=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports);var l=o((m,s)=>{self.exports={};self.module={exports:self.exports};importScripts("../../../../js/lib/runrb-ruby-2.6.1/miniruby.js");console.log(s);addEventListener("message",({data:r})=>s.exports({locateFile:function(t){return t.endsWith(".wasm")?"../../lib/runrb-ruby-2.6.1/miniruby.wasm":t},onExit:({status:t})=>{postMessage({done:!0,status:t})},noInitialRun:!0,noExitRuntime:!1,stdin(){return null},print(t){self.postMessage({fd:1,output:t+`
`})},printErr(t){switch(t){case"Calling stub instead of sigaction()":break;default:postMessage({fd:2,output:t+`
`})}}}).then(t=>{let{FS:e}=t,{code:a,args:i,input:u}=r,n=i.trim()?i.trim().split(/\n/):[];n.push("/tmp/script.rb"),stdinBuffer=u,e.isDir("/tmp")||e.createPath("/","tmp",!0,!0),e.isFile("/tmp/script.rb")&&e.unlink("/tmp/script.rb"),e.createDataFile("/tmp","script.rb",Uint8Array.from(a),!0,!0,!0);try{t.callMain(n)}catch(p){postMessage({type:"output",error:p.message})}postMessage({type:"done"})}))});l();})();
//# sourceMappingURL=worker.js.map
