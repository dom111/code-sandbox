{
  "version": 3,
  "sources": ["../../../../js/langs/pyodide-0.19.0/worker.js"],
  "sourcesContent": ["// importScripts('https://cdn.jsdelivr.net/pyodide/v0.19.0/full/pyodide.asm.js');\n// importScripts('../../../../js/lib/pyodide-0.19.0/pyodide.asm.js');\n\nimportScripts('https://cdn.jsdelivr.net/pyodide/v0.19.0/full/pyodide.js');\n\nlet stdinBufferIndex = 0,\n  stdinBuffer = '';\n\naddEventListener('message', ({ data }) =>\n  loadPyodide({\n    arguments: data.args.trim() ? data.args.trim().split('\\n') : [],\n    indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.19.0/full/',\n    onExit(status) {\n      postMessage({\n        type: 'done',\n        status,\n      });\n    },\n    stderr(content) {\n      postMessage({\n        type: 'output',\n        error: content,\n      });\n    },\n    stdin() {\n      if (stdinBuffer && stdinBufferIndex < stdinBuffer.length) {\n        const nextNewline = stdinBuffer.indexOf('\\n', stdinBufferIndex),\n          readUntil = nextNewline < 0 ? stdinBuffer.length : nextNewline + 1;\n\n        const line = stdinBuffer.substr(\n          stdinBufferIndex,\n          readUntil - stdinBufferIndex\n        );\n\n        stdinBufferIndex = readUntil;\n\n        return line;\n      }\n\n      return '';\n    },\n    stdout(content) {\n      // Hide Pyodide's messaging\n      if (content === 'Python initialization complete') {\n        return;\n      }\n\n      postMessage({\n        type: 'output',\n        output: content,\n      });\n    },\n  }).then((pyodide) => {\n    const Module = pyodide,\n      { FS } = Module,\n      { code, args: rawArgs, input } = data,\n      args = rawArgs.trim() ? rawArgs.trim().split(/\\n/) : [];\n\n    args.push('/tmp/script.py');\n\n    stdinBuffer = input;\n\n    if (!FS.isDir('/tmp')) {\n      FS.createPath('/', 'tmp', true, true);\n    }\n\n    if (FS.isFile('/tmp/script.py')) {\n      FS.unlink('/tmp/script.py');\n    }\n\n    FS.createDataFile(\n      '/tmp',\n      'script.py',\n      Uint8Array.from(code),\n      true,\n      true,\n      true\n    );\n\n    try {\n      pyodide.runPython(String.fromCharCode(...code));\n    } catch (e) {\n      postMessage({\n        type: 'output',\n        error: e.message,\n      });\n    }\n\n    postMessage({\n      type: 'done',\n    });\n  })\n);\n\n// addEventListener('message', ({ data }) => {\n//   _createPyodideModule({\n//     noInitialRun: false,\n//     locateFile(file) {\n//       return 'https://cdn.jsdelivr.net/pyodide/v0.19.0/full/' + file;\n//       // return '../../../../js/lib/pyodide-0.19.0/' + file;\n//     },\n//     onExit(status) {\n//       postMessage({\n//         type: 'done',\n//         status,\n//       });\n//     },\n//     stderr(content) {\n//       postMessage({\n//         type: 'output',\n//         error: content,\n//       });\n//     },\n//     stdin() {\n//       if (!stdinBuffer) {\n//         return null;\n//       }\n//\n//       if (stdinBufferIndex < stdinBuffer.length) {\n//         const nextNewline =\n//           stdinBuffer.indexOf('\\n') < 0\n//             ? stdinBuffer.length\n//             : stdinBuffer.indexOf('\\n');\n//\n//         return stdinBuffer.substr(stdinBufferIndex, nextNewline);\n//       }\n//\n//       return null;\n//     },\n//     stdout(content) {\n//       // Hide Pyodide's messaging\n//       if (content === 'Python initialization complete') {\n//         return;\n//       }\n//\n//       postMessage({\n//         type: 'output',\n//         output: content,\n//       });\n//     },\n//   }).then((Module) => {\n//     const { FS } = Module,\n//       { code, args: rawArgs, input } = data,\n//       args = rawArgs.trim() ? rawArgs.trim().split(/\\n/) : [];\n//\n//     args.push('/tmp/script.py');\n//\n//     stdinBuffer = input;\n//\n//     if (!FS.isDir('/tmp')) {\n//       FS.createPath('/', 'tmp', true, true);\n//     }\n//\n//     if (FS.isFile('/tmp/script.py')) {\n//       FS.unlink('/tmp/script.py');\n//     }\n//\n//     FS.createDataFile(\n//       '/tmp',\n//       'script.py',\n//       Int32Array.from(code),\n//       true,\n//       true,\n//       true\n//     );\n//\n//     try {\n//       // Module.callMain(args);\n//       Module.run(args);\n//     } catch (e) {\n//       postMessage({\n//         type: 'output',\n//         error: e.message,\n//       });\n//     }\n//\n//     postMessage({\n//       type: 'done',\n//     });\n//   });\n// });\n"],
  "mappings": "MAGA,cAAc,4DAEd,GAAI,GAAmB,EACrB,EAAc,GAEhB,iBAAiB,UAAW,CAAC,CAAE,UAC7B,YAAY,CACV,UAAW,EAAK,KAAK,OAAS,EAAK,KAAK,OAAO,MAAM;AAAA,GAAQ,GAC7D,SAAU,iDACV,OAAO,EAAQ,CACb,YAAY,CACV,KAAM,OACN,YAGJ,OAAO,EAAS,CACd,YAAY,CACV,KAAM,SACN,MAAO,KAGX,OAAQ,CACN,GAAI,GAAe,EAAmB,EAAY,OAAQ,CACxD,GAAM,GAAc,EAAY,QAAQ;AAAA,EAAM,GAC5C,EAAY,EAAc,EAAI,EAAY,OAAS,EAAc,EAE7D,EAAO,EAAY,OACvB,EACA,EAAY,GAGd,SAAmB,EAEZ,EAGT,MAAO,IAET,OAAO,EAAS,CAEd,AAAI,IAAY,kCAIhB,YAAY,CACV,KAAM,SACN,OAAQ,OAGX,KAAK,AAAC,GAAY,CACnB,GAAM,GAAS,EACb,CAAE,MAAO,EACT,CAAE,OAAM,KAAM,EAAS,SAAU,EAGnC,AAFS,GAAQ,OAAS,EAAQ,OAAO,MAAM,MAAQ,IAElD,KAAK,kBAEV,EAAc,EAET,EAAG,MAAM,SACZ,EAAG,WAAW,IAAK,MAAO,GAAM,IAG9B,EAAG,OAAO,mBACZ,EAAG,OAAO,kBAGZ,EAAG,eACD,OACA,YACA,WAAW,KAAK,GAChB,GACA,GACA,IAGF,GAAI,CACF,EAAQ,UAAU,OAAO,aAAa,GAAG,UAClC,EAAP,CACA,YAAY,CACV,KAAM,SACN,MAAO,EAAE,UAIb,YAAY,CACV,KAAM",
  "names": []
}
